// Mocks generated by Mockito 5.4.4 from annotations
// in school/test/repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:school/app/config/app_http_client.dart' as _i2;
import 'package:school/app/config/custom_snack.dart' as _i3;
import 'package:school/app/models/aluno_model.dart' as _i6;
import 'package:school/app/models/curso_aluno_model.dart' as _i9;
import 'package:school/app/models/curso_model.dart' as _i7;
import 'package:school/modules/alunos/repository/aluno_repository.dart' as _i4;
import 'package:school/modules/cursos/repository/curso_repository.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAppHttpClient_0 extends _i1.SmartFake implements _i2.AppHttpClient {
  _FakeAppHttpClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCustomSnack_1 extends _i1.SmartFake implements _i3.CustomSnack {
  _FakeCustomSnack_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AlunoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAlunoRepository extends _i1.Mock implements _i4.AlunoRepository {
  MockAlunoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppHttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeAppHttpClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.AppHttpClient);

  @override
  _i3.CustomSnack get snack => (super.noSuchMethod(
        Invocation.getter(#snack),
        returnValue: _FakeCustomSnack_1(
          this,
          Invocation.getter(#snack),
        ),
      ) as _i3.CustomSnack);

  @override
  _i5.Future<List<_i6.AlunoModel>> getAlunos() => (super.noSuchMethod(
        Invocation.method(
          #getAlunos,
          [],
        ),
        returnValue: _i5.Future<List<_i6.AlunoModel>>.value(<_i6.AlunoModel>[]),
      ) as _i5.Future<List<_i6.AlunoModel>>);

  @override
  _i5.Future<bool> addAluno({required _i6.AlunoModel? model}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAluno,
          [],
          {#model: model},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> updateAluno({required _i6.AlunoModel? model}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateAluno,
          [],
          {#model: model},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i7.CursoModel>> getAlunoCursos({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAlunoCursos,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<List<_i7.CursoModel>>.value(<_i7.CursoModel>[]),
      ) as _i5.Future<List<_i7.CursoModel>>);
}

/// A class which mocks [CursoRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCursoRepository extends _i1.Mock implements _i8.CursoRepository {
  MockCursoRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppHttpClient get httpClient => (super.noSuchMethod(
        Invocation.getter(#httpClient),
        returnValue: _FakeAppHttpClient_0(
          this,
          Invocation.getter(#httpClient),
        ),
      ) as _i2.AppHttpClient);

  @override
  _i3.CustomSnack get snack => (super.noSuchMethod(
        Invocation.getter(#snack),
        returnValue: _FakeCustomSnack_1(
          this,
          Invocation.getter(#snack),
        ),
      ) as _i3.CustomSnack);

  @override
  _i5.Future<List<_i7.CursoModel>> getCursos() => (super.noSuchMethod(
        Invocation.method(
          #getCursos,
          [],
        ),
        returnValue: _i5.Future<List<_i7.CursoModel>>.value(<_i7.CursoModel>[]),
      ) as _i5.Future<List<_i7.CursoModel>>);

  @override
  _i5.Future<int?> getCursoMatriculas({required int? id}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCursoMatriculas,
          [],
          {#id: id},
        ),
        returnValue: _i5.Future<int?>.value(),
      ) as _i5.Future<int?>);

  @override
  _i5.Future<bool> addCurso({required _i7.CursoModel? model}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCurso,
          [],
          {#model: model},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> addAlunoCurso({required _i9.CursoAlunoModel? model}) =>
      (super.noSuchMethod(
        Invocation.method(
          #addAlunoCurso,
          [],
          {#model: model},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> updateCurso({required _i7.CursoModel? model}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateCurso,
          [],
          {#model: model},
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
